<?xml version="1.0" encoding="UTF-8"?>
<root>
<log>
   <date>2018/1/20</date>
   <evalution>1、对于之前设计的词法部分代码研究发现有太多的冗余，所以新代码优化了部分冗余代码
              2、枚举变量可以唯一标识某些“状态”，那么可以对这些基本的操作符定义几个（3）枚举，中间
                                             加入搜索方法来判断是否匹配某个状态，如果不匹配，那么就不移动当前已匹配的字符指针的
                                             位置。
   </evalution>
</log>

<log>
   <date>2018/1/23</date>
   <evalution>1、每个文法的非终结符号都可以看成一个Object
              2、对于那些产生式很少的文法部分我们可以归类为某些Object中的Method
              3、利用配置文件来设定文法，描述文法各部分之间的依赖关系
              4、利用java自带的setter方法和内省来实现DI（Dependence Injection）
    <plan>理论上研究这个方法的实现可行性</plan>
               
   </evalution>
</log>

<log>
    <date>2018/1/24</date>
    <evalution>1、初步发现DI和实际所需差别有点大，而且看了Dragon的附录代码之后发现：其实
                                                两者的本质其实都是完全相同的。
               2、根据以前所设计的文法，其实本质就是几个method和两个模块：delc & stmts
               3、关于变量的先声明后使用和全局变量这种作用域的问题，可以使用局部方法处理+局部全局的
                                                符号表来解决。
       <plan>1、先简单实现功能，然后调试，通过之后再依照时间的多少来增加一些功能
             2、也可以把变量的先声明在使用和作用域的问题放到前端的后面部分来处理，具体视情况再讲
       </plan>
    </evalution>
</log>

<log>
     <date>2018/1/27</date>
     <evalution>1、初步实现了语法部分的声明和同一个块中的变量的不同名规则检查
                2、每个{}之间都被认为是一个“块”——具体实现可能会因为代码结构的差异而有所细微的改动，每个块都会
                                                 拥有其父模块的符号表（Environment），用作之后的全局变量的查找
                3、语句部分暂时分为了赋值语句、条件语句、循环语句和结束语句部分，各个部分都有对应的方法来做出实现
     <plan>1、似乎代码这样设计使得最后的中间代码生成部分完全独立，但是先写点力所能及的吧
           2、先实现语法错误没有和较少的情况下Parser的辨别能力，之后再花一天时间修改代码结果和优化，然后进入中间代码部分
           3、词法初步写出来时间划在明天（2018/1/28）,然后进行调试。
     </plan>
     </evalution>
</log>

<log>
      <date>2018/1/29 & 2018/1/30</date>
      <evalution>1、几经查找书本和自己思考，最后还是没有选择修改文法——消除左递归来使用自上而下的语法解析
                 2、考虑到文法的核心是bool这部分，所以就先对这部分使用LR(0)自动机
                 3、首先安排和分析可能的状态，一开始试了好几次，走了不少弯路，最后花了差不多一天的时间才把状态
                                                     迁移表格手动总结出来。
                 4、今天先手动测试了一下昨天写好的状态迁移图，虽然出现了点问题，但是最后都不是文法和状态迁移图的问题，
                                                   真幸运，然后输入了各个状态（一共有25个状态），然后又初始化了一个26X19的矩阵——这玩意儿几乎花了我一
                                                   晚上的时间，真怕会出错。           
      </evalution>
      <plan>1、对于产生式term-->unary来说，一开始设计状态图的时候没有严格区分，所以这里存在一个NFA分支，也就是所有具有
                                       到达状态13的状态，如果发生了错误，需要“无条件”转换到13之后再测试一遍，若还是出错，那么结果就是出错。
            2、状态设计时候忽略了两个同样的“——”，也就是可能会发生某个Action（）会有2个可能的迁移状态，代码设计的 时候要
                                     格外注意。
            3、明天就可以初步实现Parser的bool部分代码了。
      </plan>
</log>

<log>
        <date>2018/2/16</date>
        <evalution>
                                        代码问题大大的多，草
        </evalution>
</log>

<log>
        <date>2018/2/27</date>
        <evalution>
                                         开学来了花了一天的时间重新修改了bool部分的状态转换图，然后测试秒过（当然肯定还有未知的bug）
        </evalution>
        <plan>
               1、下一步准备具体设计parser，虽然之前的声明部分也测试通过了，但是整体结合还不知道有没有错误。
               2、语句部分代码结构其实很简单（目前的），但是问题的关键是解决代码的递归问题和声明不一定一次
                                                声明完。
        </plan>
</log>

<log>
         <date>2018/3/1</date>
         <evalution>
                 1、初步实现了赋值语句
                 2、补全了声明中的空声明部分
         </evalution>
         <problem>
                bool状态机在处理两个变量之间的比较和运算的时候会陷入死循环，这是一个亟待解决的问题
         </problem>
</log>

<log>
           <date>2018/3/4</date>
           <evalution>Parser初步调试通过</evalution>
           <plan>
               1、继续多写点parser？
               2、开始语义检查和最后的中间代码生成部分代码？
           </plan>
</log>

<log>
             <date>2018/3/5</date>
             <evalution>消除了代码之间的一些冗余和不合理</evalution>
             <plan>
                 1、将类型检查的大部分代码放在State中，即给每个状态赋予某些验证的类型表达式？
                 2、中间代码可以在弹出temp栈的东西的时候生成，但是这样肯定会有冗余，这个后期想办法再解决吧
             </plan>
</log>

<log>
              <date>2018/3/8</date>
              <evalution>parser和表达式的类型检查初步完成</evalution>
              <problem>除数不为0暂时无法识别出来，因为从类型上来讲这个不是错误，应该是在表达式求值或者静态分析的时候来做的</problem>
</log>

<log>
               <date>2018/3/10</date>
               <plan>开始编写中间代码生成的代码</plan>
</log>

<log>
               <date>2018/3/13</date>
               <evalution>表达式的翻译初步完成</evalution>
               <plan>1、开始翻译控制流语句和熟悉回填技术及其实现
                     2、布尔表达式的翻译结果应该是没有布尔运算的，但是目前先做到把bool划分到表达式的翻译这块来吧              
               </plan>
</log>
</root>